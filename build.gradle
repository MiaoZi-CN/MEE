buildscript {
    ext {
        proUser = System.getProperty("user.name")
        sdkRoot = System.getenv("ANDROID_HOME")
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
        maven { url 'https://repo.huaweicloud.com/repository/maven/' }
        maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url 'https://jitpack.io' }
    }
}
plugins {
    id("java")
}
repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
    maven { url 'https://repo.huaweicloud.com/repository/maven/' }
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly "com.github.Tinylake:MindustryX:v146.004"
}

sourceSets {
    main {
        java.srcDirs = ['src']
        resources.srcDir('assets')
    }
}

def buildLibDir = project.layout.buildDirectory.asFile.get().name + "\\libs"

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}Desktop.jar"
    from files("README.md", "LICENSE")

    from(sourceSets.main.resources.srcDirs)
    from {
        //noinspection GroovyMissingReturnStatement
        configurations.runtimeClasspath.collect {
            print(it.name)
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

tasks.register("myCopyJar", Copy) {
    dependsOn(jar)
    from "${buildLibDir}\\$project.name" + "Desktop.jar"
    into {
        "C:/Users/$proUser/AppData/Roaming/Mindustry/mods"
    }
}

tasks.register("text") {

}

tasks.withType(JavaCompile).configureEach {
    targetCompatibility = 16//目标的兼容性
    sourceCompatibility = JavaVersion.VERSION_16
    options.encoding = "UTF-8"
}

tasks.register('jarAndroid') {
    dependsOn(jar)
    doLast {

        if (!sdkRoot || !new File("$sdkRoot").exists()) throw new GradleException("No valid Android SDK found. ANDROID_HOME")

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

        if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "$sdkRoot/build-tools/35.0.0/d8.bat $dependencies --min-api 26 --output ${project.name}Android.jar ${project.name}Desktop.jar"
                .execute(null, new File(buildLibDir)).waitForProcessOutput(System.out, System.err)
    }
}

tasks.register('deploy', Jar) {
    dependsOn(jarAndroid)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}.jar"//存档文件名
    from {
        [zipTree("${buildLibDir}\\${project.name}Desktop.jar"),
         zipTree("${buildLibDir}\\${project.name}Android.jar")]
    }
}

tasks.register("myCopy", Copy) {
    dependsOn(deploy)
    from "${buildLibDir}\\$project.name" + ".jar"//源
    into {
        "C:/Users/$proUser/AppData/Roaming/Mindustry/mods"
    }
}
